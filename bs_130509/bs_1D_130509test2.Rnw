\documentclass[10pt,a4paper]{report}
\usepackage[utf8x]{inputenc}
\usepackage{ucs}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{Sweave}
\SweaveOpts{prefix.string=plots/pl}
\author{Dorottya Cserpan}

\begin{document}

\section{kCSD for Ballstick Modell}


<<beolvasas,echo=FALSE>>=

#############################################
############## Here I want to use current distributions!
############## or use different current source numbers as number of segments
#############################################x

#source('/media/BA0ED4600ED416EB/agy/kCSD/progik/ballsctick/ballstick.R')
#Sweave('/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat//bs_130509/bs_1D_130509test2.Rnw')
hovament<-'/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/bs_130509'
setwd('/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/bs_130509')
library('R2Cuba')
library('corpcor')
library('fields')
#milyen esetek legyenek lepcsofuggveny, gaussos
#kulonbozo a bazisfuggvenyek szama
#mas az atfedes aranya

####################################
#########   FUNCTIONS

#interpolacio (mosthol, ertek, hol legyen)
interpol<-function(xbe,y,xki){
inter<-splinefun(xbe,y,method="monoH.FC")
out<-inter(xki)
return(out)
}
#######


#####################################x
#GETTING DATA AND PARAMETERS
#1D kCSD for cells
#reading in the middle points of the segments



###################
####### Generating test distributions
#####################

#where do we want to ge the values of currents
where.db<-600
where.cord<-matrix(0,nrow=where.db,ncol=3)
where.cord[,3]<-seq(1,600,length.out=where.db)


#cell to electrode distance
d<-as.matrix(read.table('celleldist.txt'))


cell.length<-600
#coordinates of electrode
#el.nb<-16
el.nb<-as.matrix(read.table('elnum.txt'))
elec.kord<-array(0,c(el.nb,3))
elec.kord[,1]<-d
elec.kord[,3]<-seq(-50,650,length.out=el.nb)
elec.dist<-elec.kord[2,3]-elec.kord[1,3]

sigma<-0.5
###############################
##############xdifferent input functions 1 a maximális értékük
########################################

memb.currents<- list()

memb.currents[[1]]<- function(x){ ifelse(x>cell.length | x<0, 0, (x-cell.length/2)/(cell.length/2))}

memb.currents[[2]]<- function(x){ ifelse(x>cell.length | x<0, 0, (abs(x)-cell.length/2)/(cell.length/2))}
#a frekvencia <- fp2/2
#for(fp2 in 1:15){
memb.currents[[3]]<- function(x){ ifelse(x>cell.length | x<0, 0, sin(fp2*pi/cell.length*x))}

#}

#for(w in 1:5){
memb.currents[[4]]<- function(x){ ifelse(x>cell.length | x<0, 0, exp(-(x-cell.length/2)^2/((2*w*10)^2)))}
#}



###########xHOw many distribution types

distribution.nb<-22

time<-1:distribution.nb

memb.points<-c(1:600)
memb.currents.points<-array(0,c(600,distribution.nb ))
for(t in 1:2){
memb.currents.points[,t]<-memb.currents[[t]](memb.points)
}

for(fp2 in 1:15){
memb.currents.points[,2+fp2]<-memb.currents[[3]](memb.points)
}

for(w in 1:5){
memb.currents.points[,17+w]<-memb.currents[[4]](memb.points)
}
#transfer matrix for sCSD
#Az eloszlások külön időpillanatokban alkotott pintazatoknak felelnek meg



LFP<-array(0,c(el.nb,distribution.nb ))
for(xyz in 1:el.nb){
x.elec<-elec.kord[xyz,3]

integrand<- list()



integrand[[1]]<- function(x){ ifelse(x>cell.length | x<0, 0, (x-cell.length/2)/(cell.length/2)/(sqrt((x-x.elec)^2+d^2)))}

integrand[[2]]<- function(x){ ifelse(x>cell.length | x<0, 0, (abs(x)-cell.length/2)/(cell.length/2)/(sqrt((x-x.elec)^2+d^2)))}
#a frekvencia <- fp2/2
#for(fp2 in 1:15){
integrand[[3]]<- function(x){ ifelse(x>cell.length | x<0, 0, sin(fp2*pi/cell.length*x)/(sqrt((x-x.elec)^2+d^2)))}

#}

#for(w in 1:5){
integrand[[4]]<- function(x){ ifelse(x>cell.length | x<0, 0, exp(-(x-cell.length/2)^2/((2*w*10)^2))/(sqrt((x-x.elec)^2+d^2)))}
#}






for(t in 1:2){
LFP[xyz,t]<-1/(4*pi*sigma)*integrate(integrand[[t]], 0, cell.length)$value
}

for(fp2 in 1:15){

LFP[xyz,2+fp2]<-1/(4*pi*sigma)*integrate(integrand[[3]], 0, cell.length)$value
}

for(w in 1:5){
LFP[xyz,17+w]<-1/(4*pi*sigma)*integrate(integrand[[4]], 0, cell.length)$value
}



}


@


Parameters:

<<parameterek,echo=FALSE>>=

#Parameters

M<-as.numeric(read.table('basenum.txt')) #number of sources (a feltételezett források szama a sejten)



#R<- 40 #width of Gaussian or length of step funtion
R<-as.numeric(read.table('basewidth.txt'))

delta<-cell.length[1]/(M-3) #shift of overlapping sources on average
#delta<-cell.length/(M) 
#base<-'step' #type of base function ('step', 'Gaussian')
#base<-'gauss'
base<-paste(readLines('basetype.txt')) #getting it from a text file made by the .sh file
#printing the parameters to the pdf file 
cat(paste('Number of electrodes:',el.nb))
cat(paste('Number of base functions:',M))
#cat(paste('Number of segments:',seg.nb))
cat(paste('Type of base functions:',base))
cat(paste('Width of base functions:',R, 'um'))
cat(paste('sigma:',sigma))
cat(paste('Shift of overlapping of base functions:', delta, 'um'))
cat(paste('Cell to electrode distance:',d))

@

Units:
<<units,echo=FALSE>>=
cat('Potential 	  [mV]')
cat('Current      [nA]')
cat('Conductivity [S/m]') 
#cat('Capacitance 	[μF/cm2]')
cat('Dimension 	  [μm]')
#cat('Syn. weight 	[nS]')
@


<<bazisfgv,echo=FALSE>>=
#location of base function

source.cord<-array(0,c(M,3))
for (i in 1:M) source.cord[i,3]<-0+(i-2)*delta
#for (i in 1:M) source.cord[i,3]<-seg.kord[1,3]+(i-1)*delta
#source.cord[,3]<-seg.kord[,3]


const<-1/(4*pi*sigma) 

####################### kCSD

#i function,in r position, i source's coordinate: source.cord
#r_t ahol ki akarom számolni
a<-numeric() #one point of line
b<-numeric() #other point on the line
#a<-seg.kord[1,]
#b<-seg.kord[seg.nb,]
a<-source.cord[1,]
b<-source.cord[M,]

b.tilda.i<-function(i,R,source.cord,cord)
{
out<-numeric()
xl<-cord[1]
yl<-cord[2]
zl<-cord[3]

if (base=='gauss') {out<-exp(-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)/(2*R))}
if (base=='gauss2') {out<-exp(-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)/(R^2))}
if (base=='step'){ 
thresh1<-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
if ( thresh1<= R^2)  out<-1 #itt eredetileg (R/2 volt)
else out<-0

} #step
if (base=='cos'){ 
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-pi/R*distan1
if (distan1<= R/2) out<-cos(value)
if(distan1 > R/2) out<-0}

if (base=='sinxpx'){
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-4*pi/R*distan1
if (distan1<= R/2 & distan1!=0) out<-sin(value)/value
if (distan1==0) out<-1
if(distan1 > R/2) out<-0}


return(out)
}


b.i<-function(i,R,source.cord,r){


#x,y,z szerint integrálunk
fun<-function(t){

xl<-a[1]+(b[1]-a[1])*t
yl<-a[2]+(b[2]-a[2])*t
zl<-a[3]+(b[3]-a[3])*t

if (base=='gauss'){ ff<- (exp(-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)/(2*R)))/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2)}
if (base=='gauss2'){ ff<- (exp(-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)/(R^2)))/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2)}

if (base=='step'){
thresh1<-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
if ( thresh1<= R^2) {ff<- 1/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2) }
else ff<-0
}

if (base=='cos'){ 
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-pi/R*distan1
if (distan1<= R/2) ff<-cos(value)/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2)
if(distan1 > R/2) ff<-0}

if (base=='sinxpx'){
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-4*pi/R*distan1
if (distan1<= R/2 & distan1!=0) ff<-sin(value)/value/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2)
if (distan1==0) ff<-1
if(distan1 > R/2) ff<-0}




return(ff)
}


#integralt<-integrate(Vectorize(fun), -Inf,Inf,rel.tol=0.001)
integralt<-integrate(Vectorize(fun), (source.cord[i,3]-a[3]-3*R)/(b[3]-a[3]),(source.cord[i,3]-a[3]+3*R)/(b[3]-a[3]))
#integralt<-cuhre(1,1,fun,lower=as.vector((source.cord[i,3]-10*R)/(b[3]-a[3])),upper=as.vector( (source.cord[i,3]+10*R)/(b[3]-a[3])),flags=list(verbose=0))
#integralt<-cuhre(1,1,Vectorize(fun),lower=as.vector((-0.5)),upper=as.vector(1 ),flags=list(verbose=0))

#bi.value<-const*integralt$value
bi.value<-integralt$value
#bi.value<-3
return(bi.value)
}


@


<<setup,fig=TRUE,echo=FALSE>>=


plot(elec.kord[,1],elec.kord[,3],xlim=c(-35,d+10),pch=15,xlab="x (um)",ylab="y (um)", main="Simulational setup",ylim=c(0-10,610))
#points(seg.kord[,1],seg.kord[,3],pch=20)
points(source.cord[,1],source.cord[,3],col='RED')
#rect(-seg.diam[db]/2,seg.start[db,3],seg.diam[db]/2,seg.end[db,3])

if (base=='step'){
rect(-30,source.cord[1:M,3]-R/2,-20,source.cord[1:M,3]+R/2,col=rainbow(1,start=0.3,alpha=0.3))
}
#if (base=='gauss'){
#for(j in 1:M){
#x<-matrix(-100:600,ncol=1)
#gaus<-function(r.t) exp(-sum((source.cord[j,3]-r.t)^2)/(2*R))
#y<-apply(x,1,gaus)
#lines(-10*y-20,x)
#}
#}

if (base=='gauss2'){
for(j in 1:M){
x<-matrix(-100:600,ncol=1)
gaus<-function(r.t) exp(-sum((source.cord[j,3]-r.t)^2)/(R^2))
y<-apply(x,1,gaus)
lines(-10*y-20,x)
}
}



if (base=='cos'){
for(j in 1:M){
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
cosinus<-function(r.t) cos(pi/R*(source.cord[j,3]-r.t))
y<-apply(x,1,cosinus)
lines(-10*y-20,x)
}
}

if (base=='sinxpx'){
for(j in 1:M){
#x<-matrix(-100:600,ncol=1)
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
sinxpx<-function(r.t) ifelse(((source.cord[j,3]-r.t)!=0),  sin(4*pi/R*(source.cord[j,3]-r.t))/(4*pi/R*(source.cord[j,3]-r.t)),1)

y<-apply(x,1,sinxpx)
lines(-10*y-20,x)
}
}

legend("topleft",c("centre of bf","middle of seg","electrodes"),col=c("RED","BLACK","BLACK"),pch=c(1,1,15),bg="WHITE" )

@

More detailed setup:
<<setup2,fig=TRUE,echo=FALSE>>=
coloursline<-rainbow(7)
plot(elec.kord[,1],elec.kord[,3],xlim=c(-83,d+10),pch=15,xlab="x (um)",ylab="y (um)", main="Simulational setup",ylim=c(0,100))
#rect(-seg.diam[db]/2,seg.start[db,3],seg.diam[db]/2,seg.end[db,3],col="seashell1")
#points(seg.kord[,1],seg.kord[,3],pch=20,lwd=3)
points(source.cord[,1],source.cord[,3],col=coloursline,pch=20,lwd=2)


rect(-50+((1:M)%%7)*2,source.cord[1:M,3]-R/2,-35,source.cord[1:M,3]+R/2,border=coloursline[1:7],lwd=2)


#for(j in 1:M){
#x<-matrix(-100:600,ncol=1)
#gaus<-function(r.t) exp(-sum((source.cord[j,3]-r.t)^2)/(R*2))
#y<-apply(x,1,gaus)
#lines(-10*y-20,x,col=coloursline[1+(j-1)%%7],lwd=2)
#}

for(j in 1:M){
x<-matrix(-100:600,ncol=1)
gaus<-function(r.t) exp(-sum((source.cord[j,3]-r.t)^2)/(R^2))
y<-apply(x,1,gaus)
lines(-10*y-20,x,col=coloursline[1+(j-1)%%7],lwd=2)
}


for(j in 1:M){
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
cosinus<-function(r.t) cos(pi/R*(source.cord[j,3]-r.t))
y<-apply(x,1,cosinus)
lines(-10*y-55,x,col=coloursline[1+(j-1)%%7],lwd=2)
}



for(j in 1:M){
#x<-matrix(-100:600,ncol=1)
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
sinxpx<-function(r.t) ifelse((((source.cord[j,3]-r.t))!=0),  sin(4*pi/R*(source.cord[j,3]-r.t))/(4*pi/R*(source.cord[j,3]-r.t)),1)
y<-apply(x,1,sinxpx)
lines(-10*y-70,x,col=coloursline[1+(j-1)%%7],lwd=2)
}



legend("topleft",c("centre of bf","middle of seg","electrodes"),col=c("RED","BLACK","BLACK"),pch=c(1,1,15),bg="WHITE" )

@



<<elefpes,fig=TRUE, echo=FALSE>>=
##################
#ábra az LFProl

#plotting LFP
par(mfrow=c(2,1))
matplot(LFP,t='l',ylab='time (ms)',xlab='LFP')
image.plot(LFP,ylab='time (ms)',xlab='LFP',col=rainbow(40))


@


<<kernelszamolas,echo=FALSE>>=

library(foreach)
library(doMC)
#registerDoMC(cores=4)
registerDoMC(cores=16)

################# 
#Számoljuk ki a B illetve B.tilda mátrixot
#egy sor egy adott i-hez tartozó fgv, oszlopokban azonos helyekhez tartozó
#[i,j] : az i.függvény a j-dik helyen

source.nb<-M



B.tilda<-array(0,c(source.nb,where.db))
B<-array(0,c(source.nb,el.nb))
for(i in 1:source.nb){
#cat(i)
Bj.result<-numeric(el.nb)
Bj.result<-foreach(j=1:el.nb,.combine=c) %dopar% {
b.i(i,R,source.cord,elec.kord[j,])
}
B[i,]<-Bj.result

B.t.j.result<-numeric(where.db)
B.t.j.result<-foreach(j=1:where.db,.combine=c) %dopar% {
#b.tilda.i(i,R, source.cord,source.cord[j,]) #ide a t-nek a megfelelő értékét kéne beírni a source coord helyén
b.tilda.i(i,R, source.cord,where.cord[j,]) #if (b[3]-a[3])!=0 !!
}
B.tilda[i,]<-B.t.j.result
} #i


K<-array(0,c(el.nb,el.nb))
K.tilda<-array(0,c(source.nb,el.nb))

K<-t(B)%*%B
K.tilda<-t(B)%*%B.tilda
#Most mi vaaan?
C<-1/const*t(K.tilda)%*%solve(K)%*%LFP#*1000000#hogy nV-





@




<<densityimage,echo=FALSE,fig=TRUE>>=
limits<-range(memb.currents.points,C)
par(mfrow=c(2,1))
image.plot(memb.points,time,memb.currents.points,zlim=limits,xlab='x (um)')
image.plot(where.cord[,3],time,C,zlim=limits,xlab='x (um)')
@

<<densitymatplot,echo=FALSE,fig=TRUE>>=
par(mfrow=c(2,1))
matplot(memb.points,memb.currents.points,t='l',ylim=limits,xlab='x (um)',ylab='current density',main='Original current densities')
matplot(where.cord[,3],C,t='l',ylim=limits,xlab='x (um)',ylab='current density',main='REstored current densities')
@


<<errors,echo=FALSE>>=
error1<-numeric(length=distribution.nb)
for(t in 1:distribution.nb){
error1[t]<-sum(abs(memb.currents.points[,t]-C[,t]))/sum(abs(memb.currents.points[,t]))
}
@


%bs_1D_130509_maradekkedd.Rnw
<<writingtofiles,echo=FALSE>>=

name.output.error1<-paste('out_test/error1_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_where',where.db ,'_bnum',M, sep='')
write.table(error1, name.output.error1,col.names=FALSE, row.names=FALSE)


#name.output.C<-paste('out_test/C_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_where',where.db ,'_bnum',M, sep='')
#write.table(C, name.output.C,col.names=FALSE, row.names=FALSE)


@




\end{document}

