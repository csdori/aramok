\documentclass[10pt,a4paper]{report}
\usepackage[utf8x]{inputenc}
\usepackage{ucs}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{Sweave}
\SweaveOpts{prefix.string=plots/pl}
\author{Dorottya Cserpan}

\begin{document}

\section{kCSD for Ballstick Modell}


<<beolvasas,echo=FALSE>>=
#source('/media/BA0ED4600ED416EB/agy/kCSD/progik/ballsctick/ballstick.R')
#Sweave('/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat//bs_1D_130506/bs_1D_130506.Rnw')
hovament<-'/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/bs_130509'
setwd('/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/bs_130509')
library('R2Cuba')
library('corpcor')
library('fields')
#milyen esetek legyenek lepcsofuggveny, gaussos
#kulonbozo a bazisfuggvenyek szama
#mas az atfedes aranya

####################################
#########   FUNCTIONS

#interpolacio (mosthol, ertek, hol legyen)
interpol<-function(xbe,y,xki){
inter<-splinefun(xbe,y,method="monoH.FC")
out<-inter(xki)
return(out)
}
#######


#####################################x
#GETTING DATA AND PARAMETERS
#1D kCSD for cells
#reading in the middle points of the segments



###################
####### Generating test distributions
#####################
seg.nb<-100
seg.kord<-array(0,c(seg.nb,3))
seg.kord[,3]<-seq(0,600,length.out=seg.nb)
seg.length<-rep((range(seg.kord[,3])[2]-range(seg.kord[,3])[1])/(seg.nb-1),seg.nb)
seg.cord<-seg.kord
seg.start<-array(0,c(seg.nb,3))
seg.start[,3]<-seg.kord[,3]-seg.length/2
seg.end<-array(0,c(seg.nb,3))
seg.end[,3]<-seg.kord[,3]+seg.length/2


distribution.nb<-12
time<-1:length(distribution.nb)
memb.currents<-array(0,c(seg.nb,distribution.nb))







#where do we want to ge the values of currents
where.db<-30
where.cord<-matrix(0,nrow=where.db,ncol=3)
where.cord[,3]<-seq(seg.start[1,3],seg.end[seg.nb,3],length.out=where.db)


#cell to electrode distance
d<-as.matrix(read.table('celleldist.txt'))


cell.length<-seg.length*seg.nb
#coordinates of electrode
el.nb<-16
elec.kord<-array(0,c(el.nb,3))
elec.kord[,1]<-d
elec.kord[,3]<-seq(-50,650,length.out=16)
elec.dist<-elec.kord[2,3]-elec.kord[1,3]

sigma<-0.5
###############################
##############xdifferent input functions 1 a maximális értékük
########################################
memb.currents[,1]<-(c(1:100)-50)/50
memb.currents[,10]<--abs(c(1:100)-50)/50
memb.currents[,11]<-abs(c(1:100)-50)/50
memb.currents[,2]<-sin(pi/100*c(1:100))
memb.currents[,3]<-sin(2*pi/100*c(1:100))
memb.currents[,4]<-sin(3*pi/100*c(1:100))
memb.currents[,5]<-sin(4*pi/100*c(1:100))
memb.currents[,6]<-sin(5*pi/100*c(1:100))
memb.currents[,7]<-sin(6*pi/100*c(1:100))
memb.currents[,8]<-sin(7*pi/100*c(1:100))
memb.currents[,9]<-sin(8*pi/100*c(1:100))
memb.currents[,12]<--abs(c(1:100)-50)/50*sin(1:100)

#transfer matrix for sCSD
xi<-elec.kord
xj<-seg.kord
T<-array(0,c(el.nb,seg.nb))
for(i in 1:el.nb){
for(j in 1:seg.nb){
T[i,j]<-1/sqrt(sum((xi[i,]-xj[j,])^2))
}#j
}#i
LFP<-1/(4*pi*sigma)*T%*%memb.currents


#LFP<-LFP.calc/1000000 #most mV-ban van
@


Parameters:

<<parameterek,echo=FALSE>>=

#Parameters

M<-as.numeric(read.table('basenum.txt')) #number of sources (a feltételezett források szama a sejten)
#M<-seg.nb #number of sources are same as number of segments


#R<- 20 #width of Gaussian or length of step funtion
R<-as.numeric(read.table('basewidth.txt'))

delta<-cell.length[1]/(M) #shift of overlapping sources on average
#delta<-cell.length/(M) 
#base<-'step' #type of base function ('step', 'Gaussian')
#base<-'gauss'
base<-paste(readLines('basetype.txt')) #getting it from a text file made by the .sh file
#printing the parameters to the pdf file 
cat(paste('Number of electrodes:',el.nb))
cat(paste('Number of base functions:',M))
cat(paste('Number of segments:',seg.nb))
cat(paste('Type of base functions:',base))
cat(paste('Width of base functions:',R, 'um'))
cat(paste('sigma:',sigma))
cat(paste('Shift of overlapping of base functions:', delta, 'um'))
cat(paste('Cell to electrode distance:',d))

@

Units:
<<units,echo=FALSE>>=
cat('Potential 	  [mV]')
cat('Current      [nA]')
cat('Conductivity [S/m]') 
#cat('Capacitance 	[μF/cm2]')
cat('Dimension 	  [μm]')
#cat('Syn. weight 	[nS]')
@


<<bazisfgv,echo=FALSE>>=
#location of base function

source.cord<-array(0,c(M,3))
for (i in 1:M) source.cord[i,3]<-min(seg.kord[,3])+(i-1)*delta
#for (i in 1:M) source.cord[i,3]<-seg.kord[1,3]+(i-1)*delta
#source.cord[,3]<-seg.kord[,3]


const<-1/(4*pi*sigma) 

####################### kCSD

#i function,in r position, i source's coordinate: source.cord
#r_t ahol ki akarom számolni
a<-numeric() #one point of line
b<-numeric() #other point on the line
#a<-seg.kord[1,]
#b<-seg.kord[seg.nb,]
a<-source.cord[1,]
b<-source.cord[M,]

b.tilda.i<-function(i,R,source.cord,cord)
{
out<-numeric()
xl<-cord[1]
yl<-cord[2]
zl<-cord[3]

if (base=='gauss') {out<-exp(-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)/(2*R))}
if (base=='step'){ 
thresh1<-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
if ( thresh1<= R^2)  out<-1 #itt eredetileg (R/2 volt)
else out<-0

} #step
if (base=='cos'){ 
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-pi/R*distan1
if (distan1<= R/2) out<-cos(value)
if(distan1 > R/2) out<-0}

if (base=='sinxpx'){
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-4*pi/R*distan1
if (distan1<= R/2 & distan1!=0) out<-sin(value)/value
if (distan1==0) out<-1
if(distan1 > R/2) out<-0}


return(out)
}


b.i<-function(i,R,source.cord,r){


#x,y,z szerint integrálunk
fun<-function(t){

xl<-a[1]+(b[1]-a[1])*t
yl<-a[2]+(b[2]-a[2])*t
zl<-a[3]+(b[3]-a[3])*t

if (base=='gauss'){ ff<- (exp(-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)/(2*R)))/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2)}

if (base=='step'){
thresh1<-((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
if ( thresh1<= R^2) {ff<- 1/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2) }
else ff<-0
}

if (base=='cos'){ 
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-pi/R*distan1
if (distan1<= R/2) ff<-cos(value)/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2)
if(distan1 > R/2) ff<-0}

if (base=='sinxpx'){
distan1<-sqrt((source.cord[i,1]-xl)^2+(source.cord[i,2]-yl)^2+(source.cord[i,3]-zl)^2)
value<-4*pi/R*distan1
if (distan1<= R/2 & distan1!=0) ff<-sin(value)/value/sqrt((r[1]-xl)^2+(r[2]-yl)^2+(r[3]-zl)^2)*sqrt((b[1]-a[1])^2+(b[2]-a[2])^2+(b[3]-a[3])^2)
if (distan1==0) ff<-1
if(distan1 > R/2) ff<-0}




return(ff)
}


#integralt<-integrate(Vectorize(fun), -Inf,Inf,rel.tol=0.001)
integralt<-integrate(Vectorize(fun), (source.cord[i,3]-a[3]-2*R)/(b[3]-a[3]),(source.cord[i,3]-a[3]+2*R)/(b[3]-a[3]))
#integralt<-cuhre(1,1,fun,lower=as.vector((source.cord[i,3]-10*R)/(b[3]-a[3])),upper=as.vector( (source.cord[i,3]+10*R)/(b[3]-a[3])),flags=list(verbose=0))
#integralt<-cuhre(1,1,Vectorize(fun),lower=as.vector((-0.5)),upper=as.vector(1 ),flags=list(verbose=0))

#bi.value<-const*integralt$value
bi.value<-integralt$value
#bi.value<-3
return(bi.value)
}


@

<<setuppara,echo=FALSE>>=

####ABRA az elrendezesrol
# ki kene rajzolni a neuronos szegmenseket, vastagsag stb
#merolegesen rarajzolni a bazisfuggvenyeket

db<-seg.nb
setwd(hovament)
@

<<setup,fig=TRUE,echo=FALSE>>=


plot(elec.kord[,1],elec.kord[,3],xlim=c(-35,d+10),pch=15,xlab="x (um)",ylab="y (um)", main="Simulational setup",ylim=c(seg.start[1,3]-10,seg.end[seg.nb,3]-10))
points(seg.kord[,1],seg.kord[,3],pch=20)
points(source.cord[,1],source.cord[,3],col='RED')
#rect(-seg.diam[db]/2,seg.start[db,3],seg.diam[db]/2,seg.end[db,3])

if (base=='step'){
rect(-30,source.cord[1:M,3]-R/2,-20,source.cord[1:M,3]+R/2,col=rainbow(1,start=0.3,alpha=0.3))
}
if (base=='gauss'){
for(j in 1:M){
x<-matrix(-100:600,ncol=1)
gaus<-function(r.t) exp(-sum((source.cord[j,3]-r.t)^2)/(2*R))
y<-apply(x,1,gaus)
lines(-10*y-20,x)
}
}


if (base=='cos'){
for(j in 1:M){
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
cosinus<-function(r.t) cos(pi/R*(source.cord[j,3]-r.t))
y<-apply(x,1,cosinus)
lines(-10*y-20,x)
}
}

if (base=='sinxpx'){
for(j in 1:M){
#x<-matrix(-100:600,ncol=1)
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
sinxpx<-function(r.t) ifelse(((source.cord[j,3]-r.t)!=0),  sin(4*pi/R*(source.cord[j,3]-r.t))/(4*pi/R*(source.cord[j,3]-r.t)),1)

y<-apply(x,1,sinxpx)
lines(-10*y-20,x)
}
}

legend("topleft",c("centre of bf","middle of seg","electrodes"),col=c("RED","BLACK","BLACK"),pch=c(1,1,15),bg="WHITE" )

png("elrendezes.png",width=400, height=400)
plot(elec.kord[,1],elec.kord[,3],xlim=c(-50,d+10),pch=15,xlab="x (um)",ylab="y (um)", main="Simulational setup")
points(seg.kord[,1],seg.kord[,3],pch=20)
points(source.cord[,1],source.cord[,3],col='RED')
#rect(-seg.diam[db]/2,seg.start[db,3],seg.diam[db]/2,seg.end[db,3])

#rect(-40,source.cord[1:M,3]-R/2,-30,source.cord[1:M,3]+R/2,col=rainbow(1,start=0.3,alpha=0.3))


for(j in 1:M){
x<-matrix(-100:600,ncol=1)
gaus<-function(r.t) exp(-sum((source.cord[j,3]-r.t)^2)/(2*R))
y<-apply(x,1,gaus)
lines(-10*y-13,x)
}
legend("topleft",c("centre of bf","middle of seg","electrodes"),col=c("RED","BLACK","BLACK"),pch=c(1,20,15),bg="WHITE" )
dev.off()

@

More detailed setup:
<<setup2,fig=TRUE,echo=FALSE>>=
coloursline<-rainbow(7)
plot(elec.kord[,1],elec.kord[,3],xlim=c(-83,d+10),pch=15,xlab="x (um)",ylab="y (um)", main="Simulational setup",ylim=c(-50,50))
#rect(-seg.diam[db]/2,seg.start[db,3],seg.diam[db]/2,seg.end[db,3],col="seashell1")
points(seg.kord[,1],seg.kord[,3],pch=20,lwd=3)
points(source.cord[,1],source.cord[,3],col=coloursline,pch=20,lwd=2)


rect(-50+((1:M)%%7)*2,source.cord[1:M,3]-R/2,-35,source.cord[1:M,3]+R/2,border=coloursline[1:7],lwd=2)


for(j in 1:M){
x<-matrix(-100:600,ncol=1)
gaus<-function(r.t) exp(-sum((source.cord[j,3]-r.t)^2)/(R*2))
y<-apply(x,1,gaus)
lines(-10*y-20,x,col=coloursline[1+(j-1)%%7],lwd=2)
}




for(j in 1:M){
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
cosinus<-function(r.t) cos(pi/R*(source.cord[j,3]-r.t))
y<-apply(x,1,cosinus)
lines(-10*y-55,x,col=coloursline[1+(j-1)%%7],lwd=2)
}



for(j in 1:M){
#x<-matrix(-100:600,ncol=1)
x<-matrix((source.cord[j,3]-R/2):(source.cord[j,3]+R/2),ncol=1)
sinxpx<-function(r.t) ifelse((((source.cord[j,3]-r.t))!=0),  sin(4*pi/R*(source.cord[j,3]-r.t))/(4*pi/R*(source.cord[j,3]-r.t)),1)
y<-apply(x,1,sinxpx)
lines(-10*y-70,x,col=coloursline[1+(j-1)%%7],lwd=2)
}



legend("topleft",c("centre of bf","middle of seg","electrodes"),col=c("RED","BLACK","BLACK"),pch=c(1,1,15),bg="WHITE" )

@



<<elefpes,fig=TRUE, echo=FALSE>>=
##################
#ábra az LFProl

#plotting LFP
par(mfrow=c(2,1))
matplot(t(LFP),t='l',xlab='time (ms)',ylab='LFP')
image.plot(t(LFP),xlab='time (ms)',ylab='LFP',col=rainbow(40))


@


<<kernelszamolas,fig=TRUE,echo=FALSE>>=
par(mfrow=c(1,1))
library(foreach)
library(doMC)
#registerDoMC(cores=4)
registerDoMC(cores=16)

################# 
#Számoljuk ki a B illetve B.tilda mátrixot
#egy sor egy adott i-hez tartozó fgv, oszlopokban azonos helyekhez tartozó
#[i,j] : az i.függvény a j-dik helyen

source.nb<-M



B.tilda<-array(0,c(source.nb,where.db))
B<-array(0,c(source.nb,el.nb))
for(i in 1:source.nb){
#cat(i)
Bj.result<-numeric(el.nb)
Bj.result<-foreach(j=1:el.nb,.combine=c) %dopar% {
b.i(i,R,source.cord,elec.kord[j,])
}
B[i,]<-Bj.result

B.t.j.result<-numeric(where.db)
B.t.j.result<-foreach(j=1:where.db,.combine=c) %dopar% {
#b.tilda.i(i,R, source.cord,source.cord[j,]) #ide a t-nek a megfelelő értékét kéne beírni a source coord helyén
b.tilda.i(i,R, source.cord,where.cord[j,]) #if (b[3]-a[3])!=0 !!
}
B.tilda[i,]<-B.t.j.result
} #i


K<-array(0,c(el.nb,el.nb))
K.tilda<-array(0,c(source.nb,el.nb))

K<-t(B)%*%B
K.tilda<-t(B)%*%B.tilda
#Most mi vaaan?
C<-1/const*t(K.tilda)%*%solve(K)%*%LFP#*1000000#hogy nV-ban legyen az LFP ,
#C<-C/10^6 #a sigmaban cm^2-et használnak
# az integráló konstanssal is le kell osztani -hogy áramot kapjunk... !!!!!!!
#Amúgy valszeg sűrűséget kapunk, ami nekünk nem is rossz, úgyhogy kommenteljük ki ezeket
#if (base=='gauss') C.curr<- (R*2*pi)^(1/2)*C #Gaussos eset 
#if (base=='step') C.curr<- R*C #step function eset 
#if (base=='cos') C.curr<- 2/pi*R*C #step function eset 


#if (base=='sinxpx') C.curr<- sinxintc*C #step function eset 
#C.curr.many<-C
#for (i in 1: where.db) C.curr.many[i,]<-C[i,]*(where.cord[where.db,3]-where.cord[1,3])/(where.db-1)
#A density fgv-t kiintegralva kapjuk meg az aramot!!
C.curr<-array(0,dim(memb.currents))
piece.length<-(where.cord[where.db,3]-where.cord[1,3])/(where.db-1)
for(t in 1:distribution.nb){
inter<-splinefun(where.cord[,3],C[,t],method="monoH.FC")
for(db2 in 1:seg.nb ) {output<-integrate(inter,seg.kord[db2,3]-seg.length[db2]/2,seg.kord[db2,3]+seg.length[db2]/2)
C.curr[db2,t]<-output$value
}

}
C.dens<-C
#Check whether the sum of current is 0

memb.current.colsum<-colSums(memb.currents)
C.curr.colsum<-colSums(C.curr)
plot(memb.current.colsum,t='l',main='Sum of Membrane Currents',ylim=range(memb.current.colsum,C.curr.colsum))
lines(C.curr.colsum,col='RED')
legend('topright',c('Original', 'Estimated'),lty=1,col=c('BLACK','RED'))

#measure based on the difference from the original membrane current (sum)
measure.curr<-sqrt(sum(memb.current.colsum-C.curr.colsum)^2)
#C<-t(K.tilda)%*%pseudoinverse(K)%*%LFP
#measure of peakness
min.indexes<-which(C.curr==min(C.curr),arr.ind=TRUE)
measure.peakness<--(min(C.curr)-mean(C.curr[-min.indexes[1],min.indexes[2]]))/sqrt(sum(C.curr[,min.indexes[2]]^2))
@

%Nem vagyok benne biztos, hogy ez jó...
%Most kell kiszámolni az adott pontforrásokban a különböző Gaussok amplitúdóját és azokat összeadni, ezt egy mátrixban a legegyszerűbb ábrázolni. A sorok a különböző pontforrásokat jelzik, az oszlopok a különböző Gauss függvényeket, a rácspontokban az amplitúdók állnak...
%<<Cstar,fig=TRUE,echo=FALSE>>=
<<Cstar,echo=FALSE>>=
#amplitudes<-array(0,c(seg.nb,M))
#b.tilda.i<-function(i,R,source.cord,r.t)
#out<-exp(-sum((source.cord[i,]-r.t)^2)/(2*R))
#for(k in 1: seg.nb){
#	for (i in 1:M){
#	amplitudes[k,i]<-b.tilda.i(i,R,source.cord,seg.kord[k,])
#	}
#}
#image(1:seg.nb,1:M,amplitudes)
#C.star<-amplitudes%*%C
#matplot(t(C.star),t='l')
#C<-C.star
@

<<membcurrentplot,fig=TRUE,echo=FALSE>>=
par(mfrow=c(2,1),mar=c(5.1, 4.1, 4.1, 12.1), xpd=TRUE)
th.l<-min(C.curr,memb.currents)
th.u<-max(C.curr,memb.currents)
limitsodcurr<-max(abs(max(C.curr,memb.currents)))
matplot(t(memb.currents),t='l',main='Membrane currents',xlab="time (ms)", ylab="Current (nA)",ylim=c(th.l,th.u))
matplot(t(C.curr),t='l',main='Estimated MC',xlab="time (ms)", ylab="Current (nA)",ylim=c(th.l,th.u))
legend('topright',db,db, col=db,lty=1:6,bg="WHITE",inset=c(-0.6,0),ncol=2)
@


<<peakes,fig=TRUE,echo=FALSE>>=
plot(seg.kord[,3],memb.currents[,min.indexes[2]],t='l',main='Currents at the peak of the %spike',ylim=c(-2,1.5))
lines(seg.kord[,3],C.curr[,min.indexes[2]],col='RED')
legend('topright',c('Original', 'Estimated'),lty=1,col=c('BLACK','RED'))
@




<<imagemebc,fig=TRUE,echo=FALSE>>=


limitsodcurr<-range(C.curr,memb.currents)
par(mfrow=c(2,1))
image.plot(t(memb.currents),main='Membrane currents',xlab="time (ms)",ylab="y (um)",zlim=limitsodcurr)
image.plot(t(C.curr),main='Estimated MC',xlab="time (ms)",ylab="y (um)",zlim=limitsodcurr)


@
%bs_1D_130509_maradekkedd.Rnw
<<splineinterpol,echo=FALSE,fig=FALSE>>=
if(0==1){
#spline interpolaljuk a függvényt, és ugyanazokban a a pontokban számítsuk ki az eltérést...
#egyenlore elteresek van az eredeti és számolt áramok nagyságrendjében, ezért 1-re normáltjukkal számoljunk
#legyenek az interpolációs pontok ugyanazok, mint a source pontok???
ido.nb<-distribution.nb
#Let's calculate the current densities first
#let's devide each original current by the length of that segment
memb.current.dens<-array(0,c(seg.nb, ido.nb))
for (i in 1: seg.nb) memb.current.dens[i,]<-memb.currents[i,]/seg.length[i]
#the current densities are only well seen at the soma
#image(memb.current.dens)

#let's devaide the estimated current'a by the distance between them
#mivel feljebb kikommenteltük azt, hogy áramot számítson, így sűrűséget kapunk

#C.dens<-array(0,c(M, ido.nb))
#for (i in 1: M) C.dens[i,]<-C[i,]/delta

limitsodcurr<-range(C.dens,memb.current.dens)

par(mfrow=c(2,1))
image.plot(t(memb.current.dens),main='Membrane currents density',xlab="time (ms)",ylab="y (um)",zlim=limitsodcurr)
image.plot(t(C.dens),main='Estimated MC density',xlab="time (ms)",ylab="y (um)",zlim=limitsodcurr)
}
@

After interpolating:

<<splineinterpol2,echo=FALSE,fig=FALSE>>=
####################xinterpolation
if(0==1){
hany.pont<-40
memb.currents.dens.interpol<-array(0,c(hany.pont, ido.nb))
C.dens.interpol<-array(0,c(hany.pont, ido.nb))
rmse.snap<-array(0,c(1,distribution.nb)) 
measure1<-numeric()
#normalizes rmse
nrmse.snap<-array(0,c(1,distribution.nb))
error.t<-array(0,c(1,distribution.nb)) #normalied error for evrey time
interpol.limit<-c(seq(-50,550,length.out=hany.pont))
for(i in 1:distribution.nb){
memb.currents.dens.interpol[,i]<-interpol(seg.kord[,3],memb.current.dens[,i],interpol.limit)
C.dens.interpol[,i]<-interpol(where.cord[,3],C.dens[,i],interpol.limit)
rmse.snap[i]<-sqrt(mean((memb.currents[,i]-C.curr[,i])^2))
nrmse.snap[i]<-rmse.snap[i]/sqrt(mean((memb.currents[,i]^2)))
}
par(mfrow=c(2,1))
limitsodcurr<-range(C.dens,memb.current.dens)
image.plot(interpol.limit,t(memb.currents.dens.interpol),main='Membrane currents density',xlab="time (ms)",ylab="y (um)",zlim=limitsodcurr)
image.plot(interpol.limit,t(C.dens.interpol),main='Estimated MC density',xlab="time (ms)",ylab="y (um)",zlim=limitsodcurr)

}



#nrmse.snap[i]<-rmse.snap[i]/(max(memb.currents[,i])-min(memb.currents[,i]))
#error.t[i]<-sum((memb.currents.dens.interpol[,i]-C.dens.interpol[,i])^2)#/sum(memb.currents.dens.interpol[,i]^2)


measure1<-sum(abs(C.curr-memb.currents))/sum(abs(C.curr))
rmse.total<-sqrt(mean((memb.currents-C.curr)^2))
nrmse.total<-rmse.total/sqrt(mean((memb.currents^2)))





#parameters
@
%bs_1D_130509_maradekkedd.Rnw
<<writingtofiles,echo=FALSE>>=
#name.output.ksCSD<-paste('out/ksCSD_',base,'_R',R, '_dist',d, '_el',el.nb,'_seg', seg.nb, sep='')
#write.table(C,name.output.ksCSD,col.names=FALSE, row.names=FALSE)
#snap RMSE
name.output.tRMSE<-paste('out0521/tRMSE_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.nb,'_bnum',M, sep='')
#write.table(rmse.snap, name.output.tRMSE,col.names=FALSE, row.names=FALSE)
name.output.ntRMSE<-paste('out0521/normtRMSE_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.nb,'_bnum',M, sep='')
#write.table(nrmse.snap, name.output.ntRMSE,col.names=FALSE, row.names=FALSE)
name.output.RMSE.total<-paste('out0521/RMSEtot_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.nb,'_bnum',M, sep='')
#write.table(rmse.total, name.output.RMSE.total,col.names=FALSE, row.names=FALSE)
name.output.nRMSE.total<-paste('out0521/normRMSEtot_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.nb,'_bnum',M, sep='')
write.table(nrmse.total, name.output.nRMSE.total,col.names=FALSE, row.names=FALSE)


name.output.measure1<-paste('out0521/meaure1_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.nb,'_bnum',M, sep='')
write.table(measure1, name.output.measure1,col.names=FALSE, row.names=FALSE)

name.output.measure.curr<-paste('out0521/measurecurr_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.nb,'_bnum',M, sep='')
write.table(measure.curr, name.output.measure.curr,col.names=FALSE, row.names=FALSE)

name.output.measure.peak<-paste('out0521/measurepeak_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.nb,'_bnum',M, sep='')
write.table(measure.peakness, name.output.measure.peak,col.names=FALSE, row.names=FALSE)

@

<<density,echo=FALSE,fig=TRUE>>



memb.currents.dens<-array(0,c(where.db,distribution.nb))
for(t in 1:distribution.nb){
C.d<-memb.currents[,t]/seg.length
densest<-numeric(length(where.db))
for(i in 1:where.db){
for (j in 1: seg.nb){
if((where.cord[i,3]< (seg.kord[j,3]+seg.length[j])) & (where.cord[i,3]> (seg.kord[j,3]-seg.length[j]))) densest[i]<-C.d[j]
}
}
memb.currents.dens[,t]<-densest

} #t
curve(inter,0,600)

plot(where.cord[,3],C[,min.indexes[2]],col='RED')
lines(seg.kord[,3],memb.currents[,min.indexes[2]]/seg.length,col='RED')
#lines(where.cord[,3],memb.currents.dens[,min.indexes[2]]/seg.length,col='RED')
abline(v=seg.kord[1:seg.nb,3])


@



\end{document}

