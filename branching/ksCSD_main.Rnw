\documentclass[10pt,a4paper]{report}
\usepackage[utf8x]{inputenc}
\usepackage{ucs}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{Sweave}
\SweaveOpts{prefix.string=plots/pl}
\author{Dorottya Cserpan}

\begin{document}

\section{kCSD for Ballstick Modell}


LFPy simulation:


\begin{figure}
\includegraphics{/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/branching/lfpy_setup.pdf}
\end{figure}



<<beolvasas,fig=TRUE,echo=FALSE>>=
#Sweave('/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/branching/ksCSD_main.Rnw')
hovament<-'/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/branching'
workingdirectory<-'/media/BA0ED4600ED416EB/agy/kCSD/progik/bs_futtat/branching'
setwd(workingdirectory)

library('scatterplot3d')
library('foreach')
library('doMC')
library('fields')

#branching detailes based on the morphology file
source('alprogik/branching_info.R')
####################################
####Plotting
#coordinates of electrode
elwhere<-read.table('elwhere.txt')
elec.kord<-as.matrix(read.table(paste(elwhere[1,1])))
elec.kord<-matrix(elec.kord,ncol=3)
elec.dist<-elec.kord[2,3]-elec.kord[1,3]
el.nb<-dim(elec.kord)[1] #number of electrodes
sigma<-as.matrix(read.table('elprop'))[2] #sigma

#Reading in the segment information from LFPy
seg.cord<-as.matrix(read.table('coordsmid_x_y_z'))
seg.cord<-matrix(seg.cord,ncol=3)
#seg.kord<-matrix(0,c(dim(seg.cord)))
seg.kord<-seg.cord
seg.start<-matrix(as.matrix(read.table('coordsstart_x_y_z')),ncol=3)
seg.end<-matrix(as.matrix(read.table('coordsend_x_y_z')),ncol=3)
seg.diam<-as.matrix(read.table('segdiam_x_y_z'))
seg.db<-length(seg.diam)

segbranches<-1
br<-1
for (i in 1:(seg.db-1)){
if (seg.start[i+1,1]==seg.end[i,1] & seg.start[i+1,2]==seg.end[i,2] & seg.start[i+1,3]==seg.end[i,3]){
 segbranches<-c(segbranches,br)
}

if (seg.start[i+1,1]!=seg.end[i,1] | seg.start[i+1,2]!=seg.end[i,2] | seg.start[i+1,3]!=seg.end[i,3]) {
br<-br+1
segbranches<-c(segbranches,br)
}
}

#segbranch.num<-length(seg.diam)
segbranch.nb<-max(segbranches)

segbranch.comp.nb<-numeric(segbranch.nb)
for(k in 1: segbranch.nb){
segbranch.comp.nb[k]<-length(which(segbranches==k))
}



segbranch.coords<-list()
for (j in 1:segbranch.nb){

cordmatr<-array(0,c(segbranch.comp.nb[[j]]+1,3))
cordmatr[1:segbranch.comp.nb[j],]<-seg.start[which(segbranches==j),]
cordmatr[segbranch.comp.nb[j]+1,]<-seg.end[which(segbranches==j)[segbranch.comp.nb[j]],]
segbranch.coords[[j]]<-cordmatr
}


#

par(mfrow=c(1,2))
#3D plot  from LFP segments
colours<-color.scale(segbranches,col=rainbow(max(segbranches)))
limx<-range(alak[,3],elec.kord[,1])
limy<-range(alak[,4],elec.kord[,2])
limz<-range(alak[,5],elec.kord[,3])
sc<-scatterplot3d(seg.start[,1],seg.start[,3],seg.start[,2],color=colours,pch=20, xlim=limx, ylim=limz, zlim=limy,main='The cell and the electrode')
legend('topright',as.character(c(1:max(segbranches))),col=rainbow(max(segbranches)), lty=1,bg='WHITE')

#3D plot
colours<-color.scale(branches,col=rainbow(branch.nb))
limx<-range(alak[,3],elec.kord[,1])
limy<-range(alak[,4],elec.kord[,2])
limz<-range(alak[,5],elec.kord[,3])
sc<-scatterplot3d(alak[,3],alak[,5],alak[,4],color=colours,pch=20, xlim=limx, ylim=limz, zlim=limy,main='The cell and the electrode')
sc$points3d(alak[branching.points,3],alak[branching.points,5],alak[branching.points,4],col='BLACK',pch=20)
sc$points3d(elec.kord[,1],elec.kord[,3],elec.kord[,2],col='BLACK',pch=15)
legend('topright',as.character(c(1:branch.nb)),col=rainbow(branch.nb), lty=1,bg='WHITE')
@


<<LFPy,echo=FALSE>>=
#################################################
#Ha van LFPy-os szimuláció
#####################################x
#GETTING DATA AND PARAMETERS
#1D kCSD for cells
#reading in the middle points of the segments
lfpy<-1
if(lfpy==1){


#time
time<-as.matrix(read.table('time'))

#cell to electrode distance
d<-as.matrix(read.table("elprop"))[1]
#length of the segments
seg.length<-as.matrix(read.table('seglength'))

#cell.length<-sum(seg.length)

#membrane currents
memb.currents<-as.matrix(read.table('membcurr'))

M<-as.numeric(read.table('basenum.txt')) #number of sources (a feltételezett

}
@

<<shadowplot,fig=TRUE,echo=FALSE>>=

#3D plot shadows
colours<-color.scale(branches,col=rainbow(branch.nb))
limx<-range(alak[,3],elec.kord[,1])
limy<-range(alak[,4],elec.kord[,2])
limz<-range(alak[,5],elec.kord[,3])
sc<-scatterplot3d(alak[,3],alak[,5],alak[,4],color='WHITE',pch=20, xlim=limx, ylim=limz, zlim=limy,main='Projections of the cell and the electrode')
sc$points3d(rep(limx[1],comp.nb),alak[,5],alak[,4],col='GRAY',pch=20)
sc$points3d(alak[,3],rep(limz[2],comp.nb),alak[,4],col='GRAY',pch=20)
sc$points3d(alak[,3],alak[,5],rep(limy[1],comp.nb),col='GRAY',pch=20)
sc$points3d(rep(limx[1],el.nb),elec.kord[,3],elec.kord[,2],col='BLACK',pch=15)
sc$points3d(elec.kord[,1],rep(limz[2],el.nb),elec.kord[,2],col='BLACK',pch=15)
sc$points3d(elec.kord[,1],elec.kord[,3],rep(limy[1],el.nb),col='BLACK',pch=15)

@

<<branching2,fig=TRUE,echo=FALSE>>=
#2D plot
colours<-color.scale(branches,col=rainbow(branch.nb))
plot(alak[,3],alak[,4],col=colours,pch=20,cex=1.5,xlab='x',ylab='y',main='Cell morphology')
points(alak[branching.points,3],alak[branching.points,4],col='BLACK',pch=20,cex=1.5)
points(seg.start[,1],seg.start[,2])
points(seg.end[,1],seg.end[,2],col='RED')
points(seg.cord[,1],seg.cord[,2],col='BLUE')

########################################################

#for (i in 1:segbranch.nb) segbranch.comp.nb[i]<-dim(segbranch.coords[[i]])[1]-1




branch.length<-numeric(segbranch.nb) #length of branches
comp.length<-list(segbranch.nb) #compartments in the branches
comp.place<-list(segbranch.nb) #the distance measured from the beginning of the branch

for(j in 1: segbranch.nb){
lengthcomp<-numeric()
compplace<-0

for (i in 1: (segbranch.comp.nb[j])){
wh<-sum(segbranch.comp.nb[0:(j-1)])+i 
length<-sqrt(sum((seg.end[wh,]-seg.start[wh,])^2))

lengthcomp<-c(lengthcomp,length)
compplace<-c(compplace,compplace[i]+length)
}
comp.place[[j]]<-compplace
comp.length[[j]]<-lengthcomp
branch.length[j]<-sum(comp.length[[j]])
}#j
remove(j,i,lengthcomp,compplace,length)
cell.length<-sum(branch.length) #length of the cell

@


<<branches,echo=FALSE>>=
############################################################
#equations fo the line on the branches
#probléma: 1 pont két branchhez is tartozhat... ez az elágazás
#a splinefun tud ilyet is....
vonal<-list(segbranch.nb)
vonalfun<-list(segbranch.nb)
for(j in 1:segbranch.nb){
#soma


t.param<-comp.place[[j]] # a távolságoktól függ... így a görbén egyenletesen lehet elosztani a pontokat.

#line interpolation az approx-szal
coords<-segbranch.coords[[j]]
ts<-seq( from = 0, branch.length[j], length=100 )
vonal[[j]]<-apply( coords, 2, function(u) approx( t.param, u, xout = ts ,method="linear")$y ) 
vonalfun[[j]]<-apply( coords, 2, function(u) approxfun( t.param, u,method="linear") ) 
 
#else {vonal[[j]]<-alak[which(branches==j),c(3,4,5)]
#vonalfun[[j]]<-NA
#}
}
#curve(vonalfun[[j]]$V3(x),0,max(t.param))

@





<<basis,echo=FALSE>>=
########################################
############x Basis functions
#########################################
M<-as.numeric(read.table('basenum.txt'))
source.branch.db<-round(branch.length/cell.length*M)
branch.source<-rep(1:segbranch.nb,source.branch.db)
where.branch.db<-segbranch.comp.nb
# real number of the basis functions
M<-sum(source.branch.db)
source.cord<-array(0,c(M,3))
where.cord<-array(0,c(sum(where.branch.db),3))
b.cordx<-numeric()
b.cordy<-numeric()
b.cordz<-numeric()
where.cordx<-numeric()
where.cordy<-numeric()
where.cordz<-numeric()
source.cord.t<-numeric()
where.cord.t<-numeric()
where.which<-numeric()#which "where" is on which branch
for (j in 1:segbranch.nb){
#t<-seq(0,max(comp.place[[j]]),length.out=source.branch.db[j])
t<-seq(3,max(comp.place[[j]])-3,length.out=source.branch.db[j])

fcx<-vonalfun[[j]][[1]]
fcy<-vonalfun[[j]][[2]]
fcz<-vonalfun[[j]][[3]]

#where.t<-seq(1,max(comp.place[[j]])-1,length.out=where.branch.db[j])
where.t<-(comp.place[[j]][1:segbranch.comp.nb[j]]+seg.length[which(segbranches==j)]/2)

b.cordx<-c(b.cordx,fcx(t))
b.cordy<-c(b.cordy,fcy(t))
b.cordz<-c(b.cordz,fcz(t))
where.cordx<-c(where.cordx,fcx(where.t))
where.cordy<-c(where.cordy,fcy(where.t))
where.cordz<-c(where.cordz,fcz(where.t))
source.cord.t<-c(source.cord.t,t)
where.cord.t<-c(where.cord.t,where.t)
where.which<-c(where.which,rep(j,where.branch.db[j]))
}
where.cord[,1]<-where.cordx
where.cord[,2]<-where.cordy
where.cord[,3]<-where.cordz
source.cord[,1]<-b.cordx
source.cord[,2]<-b.cordy
source.cord[,3]<-b.cordz
remove(t,j,b.cordx,b.cordy,b.cordz,where.cordx,where.cordy,where.cordz)
###############################################

where.db<-length(where.which)
@

The simulated LFP:
<<LFP,fig=TRUE,echo=FALSE>>=
#########################################
###########LFP
############################################x
LFP<-as.matrix(read.table('myLFP'))
#plotting LFP
par(mfrow=c(2,1))
matplot(time,t(LFP),t='l',xlab='time (ms)',ylab='LFP')
#image.plot(time,elec.kord[,1],t(LFP),xlab='time (ms)',ylab='LFP',col=rainbow(150))
image.plot(t(LFP),xlab='time (ms)',ylab='LFP',col=rainbow(150))
@

<<parameterek,echo=FALSE>>=

#Parameters



d<-as.matrix(read.table('elprop'))[1] #distance of electrode

#R<- 20 #width of Gaussian or length of step funtion
R<-as.numeric(read.table('basewidth.txt'))

#base<-'step' #type of base function ('step', 'Gaussian')
#base<-'gauss'
base<-paste(readLines('basetype.txt')) #getting it from a text file made by the .sh file
#printing the parameters to the pdf file 
cat(paste('Number of electrodes:',el.nb))
cat(paste('Number of base functions:',M))
cat(paste('Number of segments in the simulation:',seg.db))
cat(paste('Type of base functions:',base))
cat(paste('Width of base functions:',R, 'um'))
cat(paste('sigma:',sigma))
#cat(paste('Shift of overlapping of base functions:', delta, 'um'))
cat(paste('Cell to electrode distance:',d))
cat(paste('Number of branches:',branch.nb))
cat(paste('Number of compartments in the morphology file:',comp.nb))
@



Units:
<<units,echo=FALSE>>=
cat('Potential 	  [mV]')
cat('Current      [nA]')
cat('Conductivity [S/m]') 
#cat('Capacitance 	[μF/cm2]')
cat('Dimension 	  [μm]')
#cat('Syn. weight 	[nS]')
@

<<bazisfgv,echo=FALSE>>=
##############################################x
##############xx
########################################
#location of base function

const<-1/(4*pi*sigma) 

####################### kCSD
source('alprogik/basisfun_main.R')

@


<<setup,fig=FALSE,echo=FALSE>>=

db<-1:length(seg.diam)
setwd(hovament)
#source('alprogik/plotsetup.R')
@

<<kCSD, echo=FALSE>>=
##############################################x
##############xx
########################################
registerDoMC(cores=4)
################# 
#Számoljuk ki a B illetve B.tilda mátrixot
#egy sor egy adott i-hez tartozó fgv, oszlopokban azonos helyekhez tartozó
#[i,j] : az i.függvény a j-dik helyen
source.nb<-M
#branch #melyik branchen vagyunk????
B.tilda<-array(0,c(source.nb,where.db))
B<-array(0,c(source.nb,el.nb))
for(i in 1:source.nb){
Bj.result<-numeric(el.nb)
Bj.result<-foreach(j=1:el.nb,.combine=c) %dopar% {
b.i(i,R,source.cord.t,elec.kord[j,])
}
B[i,]<-Bj.result
j<-0
B.t.j.result<-numeric(where.db)
B.t.j.result<-foreach(j=1:where.db,.combine=c) %dopar% {
#b.tilda.i(i,R, source.cord,source.cord[j,]) #ide a t-nek a megfelelő értékét kéne beírni a source coord helyén
b.tilda.i(i,R, source.cord.t,where.cord.t,j) #if (b[3]-a[3])!=0 !!

}
B.tilda[i,]<-B.t.j.result
#ha az i és j nem ugyanabban a branchben vannak, akkor ki kéne nullázni...

#B.tilda[i,c(which(source.branch[i,2]!=source.branch[,2]))]<-0
} #i


K<-array(0,c(el.nb,el.nb))
K.tilda<-array(0,c(source.nb,el.nb))

K<-t(B)%*%B
K.tilda<-t(B)%*%B.tilda

C<-1/const*t(K.tilda)%*%solve(K)%*%LFP #*1000000#hogy nV-ban legyen az LFP ,
#C<-C/10^6 #a sigmaban cm^2-et használnak
@



<<kCSDplot, fig=TRUE, echo=FALSE>>=
funaramvonal<-function(x) x/seg.length
memb.currents.vonal<-apply(memb.currents,2,funaramvonal) 
currlimits<-max(abs(range(C, memb.currents.vonal)))
par(mfrow=c(2,1))
image.plot( t(memb.currents.vonal),main="Original", zlim=c(-currlimits,currlimits), nlevel=150,  horizontal=FALSE, col=rainbow(150))
image.plot( t(C),main="ksCSD", zlim=c(-currlimits,currlimits), nlevel=150,  horizontal=FALSE, col=rainbow(150))


@



<<density2,echo=FALSE,fig=TRUE>>=
###########################################
############x coloured morphology
###########################################

#par(mfrow=c(2,1),bg='BLACK')
#image(t(memb.currents), col=rainbow(150))
#image(t(C), col=rainbow(150))
source('alprogik/plotcolscale.R')


par(mfrow=c(1,2),mar=c(2, 2, 1, 5),bg='GRAY')

min.indexes<-which(C==min(C),arr.ind=TRUE)[2]
#col.limits<-max(abs(range(C[,min.indexes],memb.currents.vonal[,min.indexes])))
col.limits<-max(abs(range(C[,min.indexes], memb.currents.vonal[,min.indexes])))#,memb.currents.vonal[,min.indexes])))
szinskala<-color.scale(c(C[,min.indexes]),col=rainbow(150),zlim=c(-col.limits*1.01,col.limits*1.01))
plot(where.cord[,1],where.cord[,2],pch=16,col=szinskala,asp=1)

szinskala2<-color.scale(c(memb.currents.vonal[,min.indexes]),col=rainbow(150),zlim=c(-col.limits*1.01,col.limits*1.01))
plot(seg.cord[,1],seg.cord[,2],pch=16,col=szinskala2,asp=1)
legend.col(col=rainbow(150),lev=c(-col.limits,col.limits))
#plot(seg.kord[,3],memb.currents.vonal[,min.indexes])
#points(where.cord[,3],C[,min.indexes],col='RED')

@

Validating by the LFPs generated by the estimated current sources.

<<validation,echo=FALSE,fig=TRUE>>=
#we should calculate the current source densities along the branches by the spline interpolation
LFP.est<-array(0,dim(LFP))
#for(t in 1:length(t)){
#C.currents<-list(branch.nb)
#for (j in 1: branch.nb){
#wcord<-where.cord[which(where.which==j),]
#currfun[[j]]<-apply( wcord, 2, function(u) splinefun( C[which(where.which==j),t], u,method="monoH.FC") ) 
#}
#const*integrate(currfun[[j]],)
#}

xi<-elec.kord
xj<-where.cord
T<-array(0,c(el.nb,where.db))
for(i in 1:el.nb){
for(j in 1:where.db){
T[i,j]<-1/sqrt(sum((xi[i,]-xj[j,])^2))
}#j
}#i
#de nem ilyen eccerű, mer a C áramsűrűség, nem áram... mekkora a hossza
#####################################
########
xi<-elec.kord
xj<-seg.cord
T2<-array(0,c(el.nb,seg.db))
for(i in 1:el.nb){
for(j in 1:seg.db){
T2[i,j]<-1/sqrt(sum((xi[i,]-xj[j,])^2))
}#j
}#i


comp.length<-rep((branch.length/where.branch.db),where.branch.db)
denscurr<-function(x) x*comp.length
C.currents<-apply(C,2,denscurr) 

LFP.est<-const*T%*%C.currents
LFP.est2<-const*T2%*%memb.currents
#let's use the same colour code
max.limits2<-max(abs(range(LFP,LFP.est)))#,memb.currents.vona
max.limits<-1
szinskala2<-color.scale(c(t(LFP)),col=rainbow(150),zlim=c(-max.limits,max.limits))



par(mfrow=c(2,1), mar=c(2,1,1,5))
image.plot( t(LFP.est)/max(abs(LFP.est)), zlim=c(-max.limits,max.limits), nlevel=150,  horizontal=FALSE, col=rainbow(150) , main='Est LFP' )

image.plot(t(LFP)/max(abs(LFP)), zlim=c(-max.limits,max.limits), nlevel=150, horizontal=FALSE, col=rainbow(150),main='LFP')

lfp.error.abs<-sum(abs(LFP-LFP.est))/length(LFP)

name.lfp.error.abs<-paste('out_branch/lfp_error_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.db,'_bnum',M, sep='')
write.table(lfp.error.abs,name.lfp.error.abs,col.names=FALSE, row.names=FALSE)


#Estimation error of the currents
current.error.abs<-sum(abs(C-memb.currents.vonal))/sum(abs(memb.currents.vonal))

name.current.error.abs<-paste('out_branch/current_error_',base,'_bwidth',R, '_dist',d, '_el',el.nb,'_seg', seg.db,'_bnum',M, sep='')
write.table(current.error.abs,name.current.error.abs,col.names=FALSE, row.names=FALSE)
cat('Estimation error of the currents:',current.error.abs)



#az lfpt-t akár simítani is lehetne és úgy összehasonlítani, de minek?
#par(mfrow=c(2,1))
#matplot(t(LFP),t='l')
#matplot(t(LFP.est),t='l')
#matplot(t(LFP.est2),t='l')


#image(t(LFP),col=rainbow(150))
#image(t(LFP.est),col=rainbow(150))
#Az eredeti eloszlást csak közelítve kapjuk vissza...

@



<<plorbasis,echo=FALSE,fig=TRUE>>=
plot(1,1,xlim=c(-20,120),ylim=c(0,max(branch.length)))
#plot(elec.kord[,1],elec.kord[,3],xlim=c(-35,d+10),pch=15,xlab="x (um)",ylab="y (um)", main="Simulational setup",ylim=c(elec.kord[1,3]-10,elec.kord[el.nb,3]+10))
#points(seg.kord[,1],seg.kord[,3],pch=20)
#points(source.cord[,1],source.cord[,3],col='RED')
#rect(-seg.diam[db]/2,seg.start[db,3],seg.diam[db]/2,seg.end[db,3])


if (base=='gauss'){
for(j in 1:branch.nb){
for(k in 1:source.branch.db[j]){
x<-matrix((0:branch.length[j]),ncol=1)
gaus<-function(r.t) exp(-sum((source.cord.t[which(branch.source==j)[k]]-r.t)^2)/(R^2))
y<-apply(x,1,gaus)
lines(-10*y+j*10,x,col=rainbow(branch.nb)[j])
}#k
}#j
}


@





Lets calculate


\end{document}


%paty yang poland














